@page "/admin"
@using System.Globalization
@using EscalationMatrixCountdown.Models
@inject EscalationMatrixCountdown.Services.FlightsService Flights

<h3>Admin — Daily Flights</h3>

<div style="display:flex; gap:12px; flex-wrap:wrap; margin-bottom:16px">
    <div>
        <label>Flight Name</label><br />
        <input @bind="name" @bind:event="oninput" />
    </div>
    <div>
        <label>Time (HH:mm)</label><br />
        <input @bind="timeText" @bind:event="oninput" />
    </div>
    <div>
        <label>Finger</label><br />
        <select @bind="finger">
            <option value="1">Finger 1</option>
            <option value="2">Finger 2</option>
            <option value="3">Finger 3</option>
        </select>
    </div>
    <div>
        <label>Aircraft</label><br />
        <select @bind="aircraft">
            <option value="@((int)AircraftType.B767_300)">B767_300</option>
            <option value="@((int)AircraftType.B737_800)">B737_800</option>
        </select>
    </div>
    <div style="align-self:end">
        <button @onclick="AddFlight">Add</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(msg))
{
    <p style="color:red">@msg</p>
}

<div style="display:grid; grid-template-columns: 1fr 1fr 1fr; gap:16px">
    @for (var col = 1; col <= 3; col++)
    {
        <div style="border:1px solid #ccc; border-radius:8px; padding:12px">
            <h4 style="margin:0 0 8px 0">Finger @col</h4>
            @{
                var list = _adminFlights
                    .Where(x => x.IsActive && x.Finger == col)
                    .OrderBy(x => SortKey(x.TimeOfDay))
                    .ThenBy(x => x.Name)
                    .ToList();

                if (list.Count == 0)
                {
                    <div style="opacity:.6">No flights</div>
                }
            }

            @foreach (var f in _adminFlights.Where(x => x.IsActive && x.Finger == col).OrderBy(x => SortKey(x.TimeOfDay)).ThenBy(x => x.Name))
            {
                if (editingId == f.Id.ToString())
                {
                    <div style="display:flex; gap:8px; align-items:center; margin:6px 0; flex-wrap:wrap">
                        <input value="@editName" @oninput="e => editName = e.Value?.ToString() ?? string.Empty" style="width:120px" />
                        <input value="@editTime" @oninput="e => editTime = e.Value?.ToString() ?? string.Empty" style="width:90px" />
                        <select value="@((int)editAircraft)" @onchange="OnEditAircraftChanged">
                            <option value="@((int)AircraftType.B767_300)">B767_300</option>
                            <option value="@((int)AircraftType.B737_800)">B737_800</option>
                        </select>
                        <button @onclick="(() => SaveEdit(f))">Save</button>
                        <button @onclick="CancelEdit">Cancel</button>
                        <span style="color:red">@editMsg</span>
                    </div>
                }
                else
                {
                    var ac = f.Type == AircraftType.B737_800 ? "B737_800" : "B767_300";
                    <div style="display:flex; gap:8px; align-items:center; justify-content:space-between; margin:6px 0">
                        <div>
                            <strong>@f.Name</strong>
                            <span style="opacity:.7; margin-left:8px">@f.TimeOfDay</span>
                            <span style="opacity:.7; margin-left:8px">@ac</span>
                        </div>
                        <div>
                            <button @onclick="(() => BeginEdit(f))">Edit</button>
                            <button style="margin-left:6px" @onclick="(() => DeleteFlight(f.Id))">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private List<Flight> _adminFlights = new();

    private string name = "";
    private string timeText = "";
    private string msg = "";
    private int finger = 1;
    private int aircraft = (int)AircraftType.B767_300;

    private string editingId = "";
    private string editName = "";
    private string editTime = "";
    private AircraftType editAircraft = AircraftType.B767_300;
    private string editMsg = "";

    protected override async Task OnInitializedAsync()
    {
        _adminFlights = (await Flights.GetAll()).ToList();
    }

    private async Task AddFlight()
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            msg = "Name required.";
            return;
        }

        if (!System.DateTime.TryParseExact(timeText, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out _))
        {
            msg = "Invalid time. Use HH:mm (24-hour).";
            return;
        }

        var f = new Flight
        {
            // Supabase will generate the Id, so we don't set it.
            Name = name.Trim(),
            TimeOfDay = timeText.Trim(),
            Finger = finger,
            IsActive = true,
            Type = (AircraftType)aircraft
        };

        await Flights.AddFlightAsync(f); 
    
        // Reset form fields
        msg = "";
        name = "";
        timeText = "";
    
        // Refresh the list from the database
        _adminFlights = (await Flights.GetAll()).ToList();
    }

    private async Task DeleteFlight(Guid id)
    {
        await Flights.DeleteFlightAsync(id);
    
        if (editingId == id.ToString())
        {
            editingId = "";
            editMsg = "";
        }
    
        // Refresh the list from the database
        _adminFlights = (await Flights.GetAll()).ToList();
    }

    private void BeginEdit(Flight f)
    {
        editingId = f.Id.ToString();
        editName = f.Name;
        editTime = f.TimeOfDay;
        editAircraft = f.Type;
        editMsg = "";
    }

    private void CancelEdit()
    {
        editingId = "";
        editMsg = "";
    }

    private async Task SaveEdit(Flight original)
    {
        if (string.IsNullOrWhiteSpace(editName))
        {
            editMsg = "Name required.";
            return;
        }

        if (!System.DateTime.TryParseExact(editTime, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out _))
        {
            editMsg = "Invalid time. Use HH:mm.";
            return;
        }

        var updated = new Flight
        {
            Id = original.Id,
            Name = editName.Trim(),
            TimeOfDay = editTime.Trim(),
            Finger = original.Finger,
            IsActive = original.IsActive,
            Type = editAircraft
        };

        await Flights.UpdateFlightAsync(updated);
    
        editingId = "";
        editMsg = "";

        // Refresh the list from the database
        _adminFlights = (await Flights.GetAll()).ToList();
    }

    private void OnEditAircraftChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsed))
        {
            if (parsed == (int)AircraftType.B737_800) editAircraft = AircraftType.B737_800;
            else editAircraft = AircraftType.B767_300;
        }
    }

    private int SortKey(string hhmm)
    {
        if (string.IsNullOrWhiteSpace(hhmm)) return 24 * 60 + 1;
        if (!System.DateTime.TryParseExact(hhmm, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out var dt))
        {
            return 24 * 60 + 1;
        }
        return dt.Hour * 60 + dt.Minute;
    }
}