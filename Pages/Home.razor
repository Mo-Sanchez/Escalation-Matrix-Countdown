@page "/"
@using System.Globalization
@using EscalationMatrixCountdown.Models
@implements IDisposable
@inject EscalationMatrixCountdown.Services.FlightsService Flights
@inject IJSRuntime JS
@using EscalationMatrixCountdown.Services
@inject IAircraftConfigService ConfigService



@if (!kiosk)
{
<div class="tv-wrap">
    <!-- Header -->
    <div class="tv-header">
        <h1 class="title">ULD Countdown</h1>
        <div class="badges">
            <div class="badge blue">Finger @selectedFinger</div>F
            <div class="badge green">@ActiveTypeName()</div>
            @if (!string.IsNullOrEmpty(activeFlightName))
            {
                <div class="badge gold">@activeFlightName</div>
            }
        </div>
    </div>

    <!-- Controls -->
    <div class="controls">
        <span>Finger:</span>
        <button @onclick="() => SetFinger(1)">1</button>
        <button @onclick="() => SetFinger(2)">2</button>
        <button @onclick="() => SetFinger(3)">3</button>

        <span style="margin-left:12px">View Flight:</span>
        <select @onchange="SelectFlight" class="flight-selector">
            <option value="">Automatic (Default)</option>
            @foreach (var flight in _allFlights.Where(x => x.IsActive && x.Finger == selectedFinger))
            {
                <option value="@flight.Id">@flight.Name - @flight.TimeOfDay</option>
            }
        </select>

        <button style="margin-left:12px" @onclick="EnterKiosk">Enter Kiosk</button>
    </div>

    @if (hasDeparture && cfg != null)
    {
        <div class="tv-grid">
            <!-- Left: Milestones table -->
            <div class="table-wrap">
                <table class="table">
                    <thead>
                        <tr><th>Milestone</th><th>Due</th><th>Remaining</th></tr>
                    </thead>
                    <tbody>

                    @if (cfg.BellyCloseOffsetMinutes.HasValue)
                    {
                        var bellyDue = DueTime(cfg.BellyCloseOffsetMinutes.Value);
                        var bellyRem = bellyDue - nowLocal;
                        var bellyClass = "";
                        if (bellyRem.TotalSeconds >= 0 && bellyRem.TotalMinutes <= 10) bellyClass = "red";
                        <tr class="@bellyClass">
                            <td>Belly Cans</td>
                            <td>@bellyDue.ToString("HH:mm")</td>
                            <td>@FormatSpan(bellyRem)</td>
                        </tr>
                    }

                    @for (var i = 0; i < cfg.StringOffsetsMinutes.Length; i++)
                    {
                        // Get the milestone object for this position in the loop
                        var milestone = cfg.StringOffsetsMinutes[i];

                        var due = DueTime(milestone.OffsetMinutes);
                        var rem = due - nowLocal;
                        var rowClass = "";
                        if (rem.TotalSeconds >= 0 && rem.TotalMinutes <= 10) rowClass = "red";
                        <tr class="@rowClass">
                            <td>@milestone.Label</td>
                            <td>@due.ToString("HH:mm")</td>
                            <td>@FormatSpan(rem)</td>
                        </tr>
                    }

                    @{
                        var lcoDue = DueTime(cfg.LastCanOffsetMinutes);
                        var lcoRem = lcoDue - nowLocal;
                        var lcoClass = "";
                        if (lcoRem.TotalSeconds >= 0 && lcoRem.TotalMinutes <= 10) lcoClass = "red";
                    }
                    <tr class="@lcoClass">
                        <td>Last Can (LCO)</td>
                        <td>@lcoDue.ToString("HH:mm")</td>
                        <td>@FormatSpan(lcoRem)</td>
                    </tr>


                    </tbody>
                </table>
            </div>

            <!-- Right: Countdown + key facts -->
            <div class="card">
                <div class="subtle">Next Due: @nextLabel @nextDueLocal.ToString("HH:mm")</div>
                <div class="countdown-big" style="color:@currentColor">@remainingText</div>

                <div style="height:12px"></div>

                <div class="kv">
                    <div class="k">Flight</div><div class="v">@activeFlightName</div>
                    <div class="k">Aircraft</div><div class="v">@ActiveTypeName()</div>
                    <div class="k">Departure</div><div class="v">@departureLocal.ToString("yyyy-MM-dd HH:mm")</div>
                    <div class="k">Now</div><div class="v">@nowLocal.ToString("yyyy-MM-dd HH:mm:ss")</div>
                </div>
            </div>
        </div>
    }
</div>
}
else
{
<div class="kiosk">
    <div class="extraSmall muted">Finger @selectedFinger</div>
    <div class="small">@activeFlightName • @ActiveTypeName()</div>
    <div class="mid muted">Next: @nextLabel @nextDueLocal.ToString("HH:mm")</div>
    <div class="big" style="color:@currentColor">@remainingText</div>

    <div style="margin-top:18px">
        <button @onclick="ExitKiosk">Exit Kiosk</button>
        <button @onclick="() => SetFinger(1)">1</button>
        <button @onclick="() => SetFinger(2)">2</button>
        <button @onclick="() => SetFinger(3)">3</button>
    </div>
</div>
}

@code {
    private string? manuallySelectedFlightID = null;
    //Todo: Set up Supabase table
    //Building admin page
    //UI Polish & Alerts
    //Integrade the supabase database https://supabase.com/dashboard/project/wmygobbzqaxyopukzxkd*/
    //Fingers have their own URL
    private string activeFlightName = "";
    private int selectedFinger = 1;
    private bool kiosk = false;
    
    private List<Flight> _allFlights = new();

    private AircraftType activeType = AircraftType.B767_300;
    private AircraftConfig cfg;

    private System.DateTime departureLocal;
    private bool hasDeparture;

    private System.DateTime nowLocal = System.DateTime.Now;
    private string nextLabel = "";
    private System.DateTime nextDueLocal;
    private string remainingText = "";
    private string currentColor = "inherit";

    private System.Timers.Timer t = new System.Timers.Timer(1000);

    protected override async Task OnInitializedAsync()
    {
        _allFlights = (await Flights.GetAll()).ToList();

        t.Elapsed += (_, __) => InvokeAsync(Tick);
        t.AutoReset = true;
        t.Enabled = true;
    }

    private void EnterKiosk()
    {
        kiosk = true;
        JS.InvokeVoidAsync("kiosk.enter");
    }

    private void SelectFlight(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();

        if (string.IsNullOrEmpty(selectedId))
        {
            manuallySelectedFlightID = null; // This is our "Restore" option
        }
        else
        {
            manuallySelectedFlightID = selectedId;
        }
    }
    private void ExitKiosk()
    {
        kiosk = false;
        JS.InvokeVoidAsync("kiosk.exit");
    }

    private void SetFinger(int f)
    {
        selectedFinger = f;
        hasDeparture = false;
        activeFlightName = "";
        manuallySelectedFlightID = null; // Add this line
    }

    private System.DateTime DueTime(int offsetMin)
    {
        return departureLocal.AddMinutes(offsetMin);
    }

    private static string FormatSpan(System.TimeSpan ts)
    {
        var sign = "";
        if (ts.TotalSeconds < 0) sign = "-";
        var abs = ts.Duration();
        return sign + abs.Hours.ToString("00") + ":" + abs.Minutes.ToString("00") + ":" + abs.Seconds.ToString("00");
    }

    private string ActiveTypeName()
    {
        if (activeType == AircraftType.B737_800) return "B737_800";
        return "B767_300";
    }

    private string LabelForIndex(int i)
    {
        if (i == 0) return "1st String";
        if (i == 1) return "2nd String";
        if (i == 2) return "3rd String";
        var n = i + 1;
        return n + "th String";
    }


    
private void Tick()
{
    nowLocal = System.DateTime.Now;
    var flights = _allFlights.Where(x => x.IsActive && x.Finger == selectedFinger).ToList();

    // --- Flight Selection Logic ---

    // Manual override logic (if a flight is selected in the dropdown)
    if (!string.IsNullOrEmpty(manuallySelectedFlightID) && Guid.TryParse(manuallySelectedFlightID, out var selectedGuid))
    {
        var manualFlight = flights.FirstOrDefault(f => f.Id == selectedGuid);
        if (manualFlight != null)
        {
            if (System.DateTime.TryParseExact(manualFlight.TimeOfDay, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out var todParsed))
            {
                var occToday = new System.DateTime(nowLocal.Year, nowLocal.Month, nowLocal.Day, todParsed.Hour, todParsed.Minute, 0);

                // If the calculated departure time for today is already in the past, advance it to the next day.
                if (occToday < nowLocal)
                {
                    occToday = occToday.AddDays(1);
                }

                departureLocal = occToday;
                hasDeparture = true;
                activeFlightName = manualFlight.Name;
                activeType = manualFlight.Type;
                cfg = ConfigService.GetConfig(activeType);
            }
        }
        else
        {
            manuallySelectedFlightID = null; // Flight not found, revert to auto
        }
    }
    // Automatic selection logic (if dropdown is on "Automatic (Default)")
    else
    {
        System.DateTime? currentOcc = null;
        string currentName = "";
        AircraftType currentType = AircraftType.B767_300;

        System.DateTime? nextOcc = null;
        string nextName = "";
        AircraftType nextType = AircraftType.B767_300;

        for (var i = 0; i < flights.Count; i++)
        {
            var f = flights[i];
            if (string.IsNullOrWhiteSpace(f.TimeOfDay)) continue;

            if (!System.DateTime.TryParseExact(f.TimeOfDay, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out var todParsed)) continue;

            var occToday = new System.DateTime(nowLocal.Year, nowLocal.Month, nowLocal.Day, todParsed.Hour, todParsed.Minute, 0);

            var config = ConfigService.GetConfig(f.Type);
            if (config.StringOffsetsMinutes.Length == 0) continue; // Defensive check

            var startWindow = occToday.AddMinutes(config.StringOffsetsMinutes[0].OffsetMinutes);
            var lco = occToday.AddMinutes(config.LastCanOffsetMinutes);
            var graceEnd = lco.AddMinutes(5);

            if (nowLocal >= startWindow && nowLocal <= graceEnd)
            {
                if (!currentOcc.HasValue || occToday > currentOcc.Value)
                {
                    currentOcc = occToday;
                    currentName = f.Name;
                    currentType = f.Type;
                }
            }
            else
            {
                System.DateTime candidate;
                if (nowLocal < startWindow) candidate = occToday;
                else candidate = occToday.AddDays(1);

                if (!nextOcc.HasValue || candidate < nextOcc.Value)
                {
                    nextOcc = candidate;
                    nextName = f.Name;
                    nextType = f.Type;
                }
            }
        }

        if (currentOcc.HasValue)
        {
            departureLocal = currentOcc.Value;
            hasDeparture = true;
            activeFlightName = currentName;
            activeType = currentType;
            cfg = ConfigService.GetConfig(activeType);
        }
        else if (nextOcc.HasValue)
        {
            departureLocal = nextOcc.Value;
            hasDeparture = true;
            activeFlightName = nextName;
            activeType = nextType;
            cfg = ConfigService.GetConfig(activeType);
        }
        else
        {
            hasDeparture = false;
        }
    }

    // --- Final Countdown Calculation ---

    // If no flight was found (either manually or automatically), exit early.
    if (!hasDeparture || cfg == null)
    {
        activeFlightName = "";
        remainingText = "00:00:00";
        nextLabel = "No Flights";
        StateHasChanged();
        return;
    }
    
    // Find the next upcoming milestone for the active flight
    var bestLabel = "";
    var bestDue = System.DateTime.MaxValue;

    for (var i = 0; i < cfg.StringOffsetsMinutes.Length; i++)
    {
        var milestone = cfg.StringOffsetsMinutes[i];
        var label = milestone.Label;
        var due = DueTime(milestone.OffsetMinutes);
        if (due >= nowLocal && due < bestDue)
        {
            bestDue = due;
            bestLabel = label;
        }
    }

    if (cfg.BellyCloseOffsetMinutes.HasValue)
    {
        var bellyDue = DueTime(cfg.BellyCloseOffsetMinutes.Value);
        if (bellyDue >= nowLocal && bellyDue < bestDue)
        {
            bestDue = bellyDue;
            bestLabel = "Belly Cans";
        }
    }

    nextLabel = bestLabel;
    nextDueLocal = bestDue;

    if (string.IsNullOrEmpty(bestLabel))
    {
        remainingText = "00:00:00";
        currentColor = "inherit";
    }
    else
    {
        var rem = nextDueLocal - nowLocal;
        remainingText = FormatSpan(rem);
        if (rem.TotalSeconds >= 0 && rem.TotalMinutes <= 10) currentColor = "red";
        else currentColor = "inherit";
    }

    StateHasChanged();
}

    public void Dispose()
    {
        if (t != null) t.Dispose();
    }
}
