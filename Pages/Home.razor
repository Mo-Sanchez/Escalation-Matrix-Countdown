@page "/"
@using System.Globalization
@using EscalationMatrixCountdown.Models
@implements IDisposable
@inject EscalationMatrixCountdown.Services.FlightsService Flights
@inject IJSRuntime JS

@if (!kiosk)
{
<div class="tv-wrap">
    <!-- Header -->
    <div class="tv-header">
        <h1 class="title">ULD Countdown</h1>
        <div class="badges">
            <div class="badge blue">Finger @selectedFinger</div>
            <div class="badge green">@ActiveTypeName()</div>
            @if (!string.IsNullOrEmpty(activeFlightName))
            {
                <div class="badge gold">@activeFlightName</div>
            }
        </div>
    </div>

    <!-- Controls -->
    <div class="controls">
        <span>Finger:</span>
        <button @onclick="() => SetFinger(1)">1</button>
        <button @onclick="() => SetFinger(2)">2</button>
        <button @onclick="() => SetFinger(3)">3</button>

        <span style="margin-left:12px">View Flight:</span>
        <select @onchange="SelectFlight" class="flight-selector">
            <option value="">Automatic (Default)</option>
            @foreach (var flight in _allFlights.Where(x => x.IsActive && x.Finger == selectedFinger))
            {
                <option value="@flight.Id">@flight.Name - @flight.TimeOfDay</option>
            }
        </select>

        <button style="margin-left:12px" @onclick="EnterKiosk">Enter Kiosk</button>
    </div>

    @if (hasDeparture && cfgRow != null)
    {
        <div class="tv-grid">
            <!-- Left: Milestones table -->
            <div class="table-wrap">
                <table class="table">
                    <thead>
                        <tr><th>Milestone</th><th>Due</th><th>Remaining</th></tr>
                    </thead>
                    <tbody>

                    @if (cfgRow.BellyCloseOffsetMinutes.HasValue)
                    {
                        var bellyDue = DueTime(cfgRow.BellyCloseOffsetMinutes.Value);
                        var bellyRem = bellyDue - nowLocal;
                        var bellyClass = (bellyRem.TotalSeconds >= 0 && bellyRem.TotalMinutes <= 10) ? "red" : "";
                        <tr class="@bellyClass">
                            <td>Belly Cans</td>
                            <td>@bellyDue.ToString("HH:mm")</td>
                            <td>@FormatSpan(bellyRem)</td>
                        </tr>
                    }

                    @foreach (var m in milestones)
                    {
                        var due = DueTime(m.OffsetMinutes);
                        var rem = due - nowLocal;
                        var rowClass = (rem.TotalSeconds >= 0 && rem.TotalMinutes <= 10) ? "red" : "";
                        <tr class="@rowClass">
                            <td>@m.Label</td>
                            <td>@due.ToString("HH:mm")</td>
                            <td>@FormatSpan(rem)</td>
                        </tr>
                    }

                    @{
                        var lcoDue = DueTime(cfgRow.LastCanOffsetMinutes);
                        var lcoRem = lcoDue - nowLocal;
                        var lcoClass = (lcoRem.TotalSeconds >= 0 && lcoRem.TotalMinutes <= 10) ? "red" : "";
                    }
                    <tr class="@lcoClass">
                        <td>Last Can (LCO)</td>
                        <td>@lcoDue.ToString("HH:mm")</td>
                        <td>@FormatSpan(lcoRem)</td>
                    </tr>
                    </tbody>
                </table>
            </div>

            <!-- Right: Countdown + key facts -->
            <div class="card">
                <div class="subtle">Next Due: @nextLabel @nextDueLocal.ToString("HH:mm")</div>
                <div class="countdown-big" style="color:@currentColor">@remainingText</div>

                <div style="height:12px"></div>

                <div class="kv">
                    <div class="k">Flight</div><div class="v">@activeFlightName</div>
                    <div class="k">Aircraft</div><div class="v">@ActiveTypeName()</div>
                    <div class="k">Departure</div><div class="v">@departureLocal.ToString("yyyy-MM-dd HH:mm")</div>
                    <div class="k">Now</div><div class="v">@nowLocal.ToString("yyyy-MM-dd HH:mm:ss")</div>
                </div>
            </div>
        </div>
    }
</div>
}
else
{
<div class="kiosk">
    <div class="extraSmall muted">Finger @selectedFinger</div>
    <div class="small">@activeFlightName • @ActiveTypeName()</div>
    <div class="mid muted">Next: @nextLabel @nextDueLocal.ToString("HH:mm")</div>
    <div class="big" style="color:@currentColor">@remainingText</div>

    <div style="margin-top:18px">
        <button @onclick="ExitKiosk">Exit Kiosk</button>
        <button @onclick="() => SetFinger(1)">1</button>
        <button @onclick="() => SetFinger(2)">2</button>
        <button @onclick="() => SetFinger(3)">3</button>
    </div>
</div>
}

@code {
    private string? manuallySelectedFlightID = null;

    private string activeFlightName = "";
    private int selectedFinger = 1;
    private bool kiosk = false;

    private List<Flight> _allFlights = new();
    private List<AircraftMilestoneRow> milestones = new();
    private AircraftConfigRow? cfgRow;

    private AircraftType activeType = AircraftType.B767_300;

    private DateTime departureLocal;
    private bool hasDeparture;

    private DateTime nowLocal = DateTime.Now;
    private string nextLabel = "";
    private DateTime nextDueLocal;
    private string remainingText = "";
    private string currentColor = "inherit";

    private System.Timers.Timer t = new(1000);

    // cache to avoid reloading config/milestones unnecessarily
    private string? lastLoadedTypeKey = null;

    protected override async Task OnInitializedAsync()
    {
        _allFlights = (await Flights.GetAll()).ToList();

        t.Elapsed += async (_, __) => await InvokeAsync(Tick);
        t.AutoReset = true;
        t.Enabled = true;
    }

    private void EnterKiosk()
    {
        kiosk = true;
        JS.InvokeVoidAsync("kiosk.enter");
    }

    private void ExitKiosk()
    {
        kiosk = false;
        JS.InvokeVoidAsync("kiosk.exit");
    }

    private void SelectFlight(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();

        if (string.IsNullOrEmpty(selectedId))
            manuallySelectedFlightID = null;
        else
            manuallySelectedFlightID = selectedId;
    }

    private void SetFinger(int f)
    {
        selectedFinger = f;
        hasDeparture = false;
        activeFlightName = "";
        manuallySelectedFlightID = null;
    }

    private DateTime DueTime(int offsetMin) => departureLocal.AddMinutes(offsetMin);

    private static string FormatSpan(TimeSpan ts)
    {
        var sign = ts.TotalSeconds < 0 ? "-" : "";
        var abs = ts.Duration();
        return sign + abs.Hours.ToString("00") + ":" + abs.Minutes.ToString("00") + ":" + abs.Seconds.ToString("00");
    }

    private string ActiveTypeName()
    {
        if (activeType == AircraftType.B737_800) return "B737_800";
        return "B767_300";
    }

    private static bool TryParseTod(string? s, out DateTime tod)
    {
        tod = default;
        if (string.IsNullOrWhiteSpace(s)) return false;
        return DateTime.TryParseExact(
            s.Trim(),
            new[] { "HH:mm", "HH:mm:ss" },
            CultureInfo.InvariantCulture,
            DateTimeStyles.None,
            out tod
        );
    }

    private async Task EnsureConfigLoadedAsync(AircraftType type)
    {
        var key = type == AircraftType.B737_800 ? "B737_800" : "B767_300";
        if (lastLoadedTypeKey == key && cfgRow != null && milestones.Count > 0) return;

        cfgRow = await Flights.GetAircraftConfigAsync(key);
        milestones = (await Flights.GetMilestonesAsync(key))
            .OrderBy(m => m.SortOrder)
            .ToList();

        lastLoadedTypeKey = key;
    }

    private async Task Tick()
    {
        nowLocal = DateTime.Now;

        var flights = _allFlights.Where(x => x.IsActive && x.Finger == selectedFinger).ToList();

        // Manual selection
        if (!string.IsNullOrEmpty(manuallySelectedFlightID) && Guid.TryParse(manuallySelectedFlightID, out var selectedGuid))
        {
            var manualFlight = flights.FirstOrDefault(f => f.Id == selectedGuid);
            if (manualFlight != null && TryParseTod(manualFlight.TimeOfDay, out var todParsed))
            {
                var occToday = new DateTime(nowLocal.Year, nowLocal.Month, nowLocal.Day, todParsed.Hour, todParsed.Minute, 0);
                if (occToday < nowLocal) occToday = occToday.AddDays(1);

                departureLocal = occToday;
                hasDeparture = true;
                activeFlightName = manualFlight.Name;
                activeType = manualFlight.Type;

                await EnsureConfigLoadedAsync(activeType);
            }
            else
            {
                manuallySelectedFlightID = null; // fallback to auto
            }
        }
        else
        {
            // Auto selection
            DateTime? currentOcc = null;
            string currentName = "";
            AircraftType currentType = AircraftType.B767_300;

            DateTime? nextOcc = null;
            string nextName = "";
            AircraftType nextType = AircraftType.B767_300;

            for (var i = 0; i < flights.Count; i++)
            {
                var f = flights[i];
                if (!TryParseTod(f.TimeOfDay, out var todParsed)) continue;

                var occToday = new DateTime(nowLocal.Year, nowLocal.Month, nowLocal.Day, todParsed.Hour, todParsed.Minute, 0);

                // We need config to compute the active window start; use cached or fetch once per type we test
                var typeKey = f.Type == AircraftType.B737_800 ? "B737_800" : "B767_300";
                var tmpCfg = (lastLoadedTypeKey == typeKey && cfgRow != null)
                    ? cfgRow
                    : await Flights.GetAircraftConfigAsync(typeKey);

                // If no config yet, assume strings start at -90 as a defensive default
                var firstOffset = -90;
                if (tmpCfg != null)
                {
                    // best-effort: if milestones cached mismatch type, we don't rely on them here
                    firstOffset = tmpCfg.LastCanOffsetMinutes < -90 ? tmpCfg.LastCanOffsetMinutes : -90;
                }

                var startWindow = occToday.AddMinutes(firstOffset); // earliest milestone (rough guard)
                var lco = occToday.AddMinutes(tmpCfg?.LastCanOffsetMinutes ?? -30);
                var graceEnd = lco.AddMinutes(5);

                if (nowLocal >= startWindow && nowLocal <= graceEnd)
                {
                    if (!currentOcc.HasValue || occToday > currentOcc.Value)
                    {
                        currentOcc = occToday;
                        currentName = f.Name;
                        currentType = f.Type;
                    }
                }
                else
                {
                    var candidate = nowLocal < startWindow ? occToday : occToday.AddDays(1);
                    if (!nextOcc.HasValue || candidate < nextOcc.Value)
                    {
                        nextOcc = candidate;
                        nextName = f.Name;
                        nextType = f.Type;
                    }
                }
            }

            if (currentOcc.HasValue)
            {
                departureLocal = currentOcc.Value;
                hasDeparture = true;
                activeFlightName = currentName;
                activeType = currentType;
                await EnsureConfigLoadedAsync(activeType);
            }
            else if (nextOcc.HasValue)
            {
                departureLocal = nextOcc.Value;
                hasDeparture = true;
                activeFlightName = nextName;
                activeType = nextType;
                await EnsureConfigLoadedAsync(activeType);
            }
            else
            {
                hasDeparture = false;
            }
        }

        // --- Final Countdown Calculation ---
        if (!hasDeparture || cfgRow == null)
        {
            activeFlightName = "";
            remainingText = "00:00:00";
            nextLabel = "No Flights";
            StateHasChanged();
            return;
        }

        // Determine next milestone
        string bestLabel = "";
        DateTime bestDue = DateTime.MaxValue;

        foreach (var m in milestones)
        {
            var due = DueTime(m.OffsetMinutes);
            if (due >= nowLocal && due < bestDue)
            {
                bestDue = due;
                bestLabel = m.Label;
            }
        }

        if (cfgRow.BellyCloseOffsetMinutes.HasValue)
        {
            var bellyDue = DueTime(cfgRow.BellyCloseOffsetMinutes.Value);
            if (bellyDue >= nowLocal && bellyDue < bestDue)
            {
                bestDue = bellyDue;
                bestLabel = "Belly Cans";
            }
        }

        nextLabel = bestLabel;
        nextDueLocal = bestDue;

        if (string.IsNullOrEmpty(bestLabel))
        {
            remainingText = "00:00:00";
            currentColor = "inherit";
        }
        else
        {
            var rem = nextDueLocal - nowLocal;
            remainingText = FormatSpan(rem);
            currentColor = (rem.TotalSeconds >= 0 && rem.TotalMinutes <= 10) ? "red" : "inherit";
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        t?.Dispose();
    }
}
